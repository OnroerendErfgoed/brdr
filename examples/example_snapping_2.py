from brdr.aligner import Aligner
from brdr.enums import GRBType, OpenbaarDomeinStrategy
from brdr.geometry_utils import geom_from_wkt
from brdr.grb import GRBActualLoader
from brdr.loader import DictLoader
from examples import show_map, print_brdr_formula

# Press the green button in the gutter to run the script.
if __name__ == "__main__":
    """
    EXAMPLE to use the predictor-function to automatically predict which resulting
    geometries are interesting to look at (based on detection of breakpoints and
    relevant distances of 'no-change')
    """
    # Initiate an Aligner
    aligner = Aligner(max_workers=-1)

    parcel_wkt = "MultiPolygon (((176601.17833364009857178 174696.6223953552544117, 176589.48553363233804703 174687.07282735034823418, 176583.66473362594842911 174694.12889135628938675, 176590.62780563533306122 174699.80780335888266563, 176590.89020563662052155 174700.02181936055421829, 176595.40860563516616821 174703.70693936198949814, 176613.93948564678430557 174718.82041137292981148, 176638.31906966865062714 174738.70393138751387596, 176644.25897367298603058 174731.80658737942576408, 176601.17833364009857178 174696.6223953552544117)))"
    parcel_geom = geom_from_wkt(parcel_wkt)
    # Load thematic data & reference data
    # 550/650
    wkt = "Polygon ((176502.06903269811300561 174525.21342084850766696, 176598.26893461190047674 174575.05957464542007074, 176586.83924329539877363 174386.15217649791156873, 176567.47226634246180765 174389.32709075248567387, 176431.90342767190304585 174383.29475366877159104, 176421.42621063179103658 174522.03850659393356182, 176502.06903269811300561 174525.21342084850766696))"
    # 101
    # wkt = "Polygon ((171681.61391718150116503 174093.33527241024421528, 171699.81010965688619763 174061.65692696082987823, 171718.85482924254029058 174031.39279336185427383, 171679.72830138093559071 174030.5442662516143173, 171669.92309921802370809 174047.60908924668910913, 171681.61391718150116503 174093.33527241024421528))"

    # 550
    wkt = "Polygon ((176606.77175185008672997 174725.19333245884627104, 176601.53314333004527725 174635.97824190513347276, 176598.99321192633942701 174587.24330809732782654, 176497.71344720522756688 174535.17471432220190763, 176437.07258494273992255 174661.53630165450158529, 176500.25337860887520947 174688.84056424390291795, 176545.97214387485291809 174721.85967249152599834, 176556.13186948947259225 174726.3045524479530286, 176562.79918942411313765 174731.3844152552774176, 176585.34108063162420876 174756.46623786646523513, 176606.93049756277468987 174774.24575769211514853, 176609.47042896642233245 174770.75335201207781211, 176606.77175185008672997 174725.19333245884627104))"
    loader = DictLoader({"1": geom_from_wkt(wkt)})
    aligner.load_thematic_data(loader)
    # Load reference data
    loader = GRBActualLoader(grb_type=GRBType.ADP, partition=1000, aligner=aligner)
    aligner.load_reference_data(loader)
    aligner.partial_snapping = False

    dict_results = aligner.process(
        relevant_distances=[10],
        od_strategy=OpenbaarDomeinStrategy.SNAP_ALL_SIDE,
        threshold_overlap_percentage=50,
    )
    show_map(dict_results, aligner.dict_thematic, aligner.dict_reference)
    print_brdr_formula(dict_results, aligner)
