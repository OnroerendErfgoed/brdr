from brdr.aligner import Aligner
from brdr.enums import OpenbaarDomeinStrategy, AlignerResultType, GRBType
from brdr.geometry_utils import geom_from_wkt
from brdr.grb import GRBActualLoader
from brdr.loader import DictLoader

if __name__ == "__main__":
    """
    Example to load dat with a DictLoader, and also adding the properties to the result
    """
    # CREATE AN ALIGNER
    aligner = Aligner(crs="EPSG:31370", multi_as_single_modus=True)
    # ADD A THEMATIC POLYGON TO THEMATIC DICTIONARY and LOAD into Aligner
    id = 1
    # wkt = "MultiPolygon (((49674.53350025205872953 212939.76344240363687277, 49677.69610024776193313 212939.42224240116775036, 49676.99710025425883941 212933.44414240308105946, 49674.53350025205872953 212939.76344240363687277)),((49688.28240024819388054 212927.06574240047484636, 49686.68830024974886328 212916.14334240090101957, 49681.12690025352640077 212916.96024240180850029, 49681.13430025208799634 212917.0583424037322402, 49682.31710025449865498 212932.79904240183532238, 49682.73680025131034199 212938.38264240324497223, 49682.78050025340053253 212938.96554240118712187, 49683.74360025461646728 212946.91844240017235279, 49691.0101002507872181 212945.75324240233749151, 49688.28240024819388054 212927.06574240047484636)),((49674.53350025205872953 212939.76344240363687277, 49671.69500025155139156 212948.88854240160435438, 49672.75610025017522275 212948.84994240384548903, 49678.8635002502851421 212947.75434240233153105, 49677.71260025139781646 212939.5786424009129405, 49674.53350025205872953 212939.76344240363687277)))"
    # wkt = "MultiPolygon (((51954.95271303252957296 211048.68702463060617447, 51938.70616134653391782 211096.98505468480288982, 51939.81027680351689924 211124.4937746524810791, 51935.23602368202409707 211140.26712189614772797, 51927.79098565255117137 211164.96819465328007936, 51921.00845925728208385 211199.35410520061850548, 51923.05898359730781522 211207.65088792704045773, 51917.75916586420498788 211212.22516222950071096, 51901.32328580536704976 211223.23496504500508308, 51894.69850834389217198 211223.45578813552856445, 51890.59743848390644416 211231.34246705286204815, 51872.20570886149653234 211245.60157914645969868, 51853.62469322650576942 211263.74092741869390011, 51876.55916007175983395 211279.19881650805473328, 51882.23754983021353837 211276.32806601841002703, 51944.79590024273784366 211269.10124240443110466, 51967.48510024161078036 211266.11284240242093801, 51985.26480023766634986 211263.98464240506291389, 52003.41700024360034149 211261.48804240394383669, 52021.06070023971551564 211259.05614240374416113, 52021.05930023833934683 211259.04554240219295025, 52039.03160023879900109 211256.55734240170568228, 52057.84540023839508649 211254.01204240415245295, 52074.3482002410601126 211252.03754240181297064, 52092.68810024288541172 211249.55564240273088217, 52109.92130024153448176 211242.69374240003526211, 52122.36570023912645411 211233.50874240230768919, 52140.13560024053731468 211213.73554240446537733, 52142.12150024024595041 211185.53694240469485521, 52142.97510024301300291 211171.4294424019753933, 52144.73980023844342213 211151.31204240303486586, 52146.0404002381110331 211131.6299424022436142, 52147.29690023635339458 211111.11634240299463272, 52148.69380024190468248 211091.62394240591675043, 52149.02580023671907838 211086.66374240349978209, 52150.29010024027957115 211068.65294240415096283, 52151.43460024252999574 211050.6285424055531621, 52152.71960023886640556 211032.64604240283370018, 52153.92700024037912954 211015.01544240396469831, 52158.82171921963163186 211002.09254750702530146, 52112.57425586403405759 210984.33175007998943329, 52093.83851935005804989 211035.38820296246558428, 52034.17117054246773478 211014.43133613932877779, 52057.13685620701289736 210957.6414845883846283, 52054.0224002386094071 210956.67194240633398294, 52029.6661002422333695 210939.72734240535646677, 52004.76496764871990308 210930.79699763003736734, 51996.68901860382175073 210945.75012666638940573, 51988.96004096535034478 210962.62761054653674364, 51989.21242231558426283 210967.13878951128572226, 51983.02929103696078528 210988.36974578350782394, 51972.42957085046509746 211018.33912037219852209, 51965.2053982724173693 211032.06192209757864475, 51966.53035800077486783 211037.29866567254066467, 51954.95271303252957296 211048.68702463060617447)))"
    # wkt = "MultiPolygon (((46329.9711398531217128 212531.58870392292737961, 46311.33414783817715943 212504.52367990557104349, 46304.72320383533951826 212514.28329591173678637, 46311.25829646002966911 212518.76453516352921724, 46301.69045306496263947 212532.61805618181824684, 46295.29174293308460619 212541.97491956036537886, 46301.13869183270435315 212545.99427193403244019, 46313.96089984236459713 212554.80860794056206942, 46329.9711398531217128 212531.58870392292737961)))"
    wkt = "Polygon ((174159.86498764005955309 179307.03392354605603032, 174261.82966211286839098 179298.04720647388603538, 174257.68194654109538533 179230.99247139683575369, 174246.62137168302433565 179223.0426832175871823, 174246.27572871872689575 179216.47546689561568201, 174258.7188754340459127 179214.40160910971462727, 174248.69522946892539039 179177.07216896372847259, 174229.68486643160576932 179182.60245639277854934, 174198.92264260759111494 179199.88460460852365941, 174153.9890572466829326 179211.63646539521869272, 174141.20026756706647575 179215.09289503836771473, 174141.20026756706647575 179215.09289503836771473, 174148.45876981766195968 179252.76797814865130931, 174159.86498764005955309 179307.03392354605603032))"
    thematic_dict = {id: geom_from_wkt(wkt)}
    # Add properties
    thematic_dict_properties = {
        id: {"propA": 1, "propB": 1.1, "propC": "dit is tekst", "propD": None}
    }
    loader = DictLoader(
        data_dict=thematic_dict, data_dict_properties=thematic_dict_properties
    )
    aligner.load_thematic_data(loader)
    # ADD A REFERENCE POLYGON TO REFERENCE DICTIONARY and LOAD into Aligner
    loader = GRBActualLoader(grb_type=GRBType.ADP, partition=1000, aligner=aligner)
    aligner.load_reference_data(loader)
    # EXECUTE THE ALIGNMENT
    relevant_distance = 2.7
    process_result = aligner.process(
        relevant_distance=relevant_distance,
        od_strategy=OpenbaarDomeinStrategy.EXCLUDE,
        threshold_overlap_percentage=50,
    )
    # PRINT RESULTS IN WKT
    print("result: " + process_result[id][relevant_distance]["result"].wkt)
    print(
        "added area: " + process_result[id][relevant_distance]["result_diff_plus"].wkt
    )
    print(
        "removed area: " + process_result[id][relevant_distance]["result_diff_min"].wkt
    )
    fcs = aligner.get_results_as_geojson(
        resulttype=AlignerResultType.PROCESSRESULTS, formula=True, attributes=True
    )
    print(fcs["result"])
