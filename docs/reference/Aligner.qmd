# Aligner { #brdr.aligner.Aligner }

```python
aligner.Aligner(
    self,
    *,
    feedback=None,
    relevant_distance=1,
    relevant_distances=[round(k, RELEVANT_DISTANCE_DECIMALS) for k in np.arange(0, 310, 10, dtype=int) / 100],
    threshold_overlap_percentage=50,
    od_strategy=OpenDomainStrategy.SNAP_ALL_SIDE,
    crs=DEFAULT_CRS,
    multi_as_single_modus=True,
    preserve_topology=False,
    snap_strategy=SNAP_STRATEGY,
    snap_max_segment_length=SNAP_MAX_SEGMENT_LENGTH,
    partial_snapping=PARTIAL_SNAPPING,
    partial_snap_strategy=PARTIAL_SNAP_STRATEGY,
    partial_snap_max_segment_length=PARTIAL_SNAP_MAX_SEGMENT_LENGTH,
    threshold_exclusion_area=0,
    threshold_exclusion_percentage=0,
    threshold_inclusion_percentage=100,
    buffer_multiplication_factor=1.01,
    threshold_circle_ratio=0.98,
    correction_distance=0.01,
    mitre_limit=10,
    area_limit=None,
    max_workers=None,
)
```

This class is used to compare and align the thematic data with the reference data.
The reference data can be loaded in different ways, for example by using the GRB
data.
The thematic data can be loaded by using different Loaders: DictLoader, GeojsonLoader,...
The class can be used to compare and aligne the thematic data with the reference data.

## Methods

| Name | Description |
| --- | --- |
| [evaluate](#brdr.aligner.Aligner.evaluate) | Compares and evaluate input-geometries (with formula). Attributes are added to evaluate and decide if new |
| [get_brdr_formula](#brdr.aligner.Aligner.get_brdr_formula) | Calculates formula-related information based on the input geometry. |
| [get_diff_metrics](#brdr.aligner.Aligner.get_diff_metrics) | Calculates a dictionary containing difference metrics for thematic elements based on a distance series. |
| [get_input_as_geojson](#brdr.aligner.Aligner.get_input_as_geojson) | get a geojson of the input polygons (thematic or reference-polygons) |
| [get_results_as_geojson](#brdr.aligner.Aligner.get_results_as_geojson) | get a geojson of a dictionary containing the resulting geometries for all |
| [get_thematic_union](#brdr.aligner.Aligner.get_thematic_union) | returns a unary_unioned geometry from all the thematic geometries |
| [load_reference_data](#brdr.aligner.Aligner.load_reference_data) | Loads the reference features into the aligner, and prepares the reference-data for processing |
| [load_thematic_data](#brdr.aligner.Aligner.load_thematic_data) | Loads the thematic features into the aligner |
| [predictor](#brdr.aligner.Aligner.predictor) | Predicts the 'most interesting' relevant distances for changes in thematic |
| [process](#brdr.aligner.Aligner.process) | Calculates the resulting dictionaries for thematic data based on a series of |
| [process_geometry](#brdr.aligner.Aligner.process_geometry) | method to align a geometry to the reference layer |
| [save_results](#brdr.aligner.Aligner.save_results) | Exports analysis results (as geojson) to path. |

### evaluate { #brdr.aligner.Aligner.evaluate }

```python
aligner.Aligner.evaluate(
    ids_to_evaluate=None,
    base_formula_field=FORMULA_FIELD_NAME,
    relevant_distances=[round(k, RELEVANT_DISTANCE_DECIMALS) for k in np.arange(0, 310, 10, dtype=int) / 100],
    full_strategy=FullStrategy.NO_FULL,
    max_predictions=-1,
    multi_to_best_prediction=True,
)
```

Compares and evaluate input-geometries (with formula). Attributes are added to evaluate and decide if new
proposals can be used
ids_to_evaluate: list with all IDs to evaluate. all other IDs will be unchanged. If None (default), all self.dict_thematic will be evaluated.
base_formula_field: name of the field where the base_formula is found in the data
max_predictions: integer that indicates how many predictions are maximally returned. (-1 indicates all predictions are returned)
relevant_distances: relevant distances to evaluate
full_strategy: enum, decided which predictions are kept or prefered based on full-ness of the prediction
multi_to_best (default True): Only usable in combination with max_predictions=1. If True (and max_predictions=1), the prediction with highest score will be taken.If False, the original geometry is returned.

### get_brdr_formula { #brdr.aligner.Aligner.get_brdr_formula }

```python
aligner.Aligner.get_brdr_formula(geometry, with_geom=False)
```

Calculates formula-related information based on the input geometry.

Args:
    geometry (shapely.geometry object): The input geometry.
    with_geom (bool, optional): Whether to include geometry information in the
        output. Defaults to False.

Returns:
    dict: A dictionary containing formula-related data:

    - "alignment_date": datetime.now().strftime(DATE_FORMAT),
    - "brdr_version": str(__version__),
    - "reference_source": self.dict_reference_source,
    - "full": True if the geometry exists out of all full reference-polygons, else False.
    - "area": Area of the geometry.
    - "reference_features": {
        array of all the reference features the geometry is composed of:
            -   'full': True if the intersection is the same as the reference
                geometry, else False.
            -   'area': Area of the intersection or reference geometry.
            -   'percentage': Percentage of intersection area relative to the
                reference geometry.
            -   'geometry': GeoJSON representation of the intersection (if
                with_geom is True).},
    - "reference_od": Discription of the OD-part of the geometry (= not covered by reference-features),

### get_diff_metrics { #brdr.aligner.Aligner.get_diff_metrics }

```python
aligner.Aligner.get_diff_metrics(
    dict_processresults=None,
    dict_thematic=None,
    diff_metric=DiffMetric.CHANGES_AREA,
)
```

Calculates a dictionary containing difference metrics for thematic elements based on a distance series.

Parameters:
dict_series (dict): A dictionary where keys are thematic IDs and values are dictionaries mapping relative distances to ProcessResult objects.
dict_thematic (dict): A dictionary where keys are thematic IDs and values are BaseGeometry objects representing the original geometries.
diff_metric (DiffMetric, optional): The metric to use for calculating differences. Default is DiffMetric.CHANGES_AREA.

Returns:
dict: A dictionary where keys are thematic IDs and values are dictionaries mapping relative distances to calculated difference metrics.

### get_input_as_geojson { #brdr.aligner.Aligner.get_input_as_geojson }

```python
aligner.Aligner.get_input_as_geojson(inputtype=AlignerInputType.REFERENCE)
```

get a geojson of the input polygons (thematic or reference-polygons)

### get_results_as_geojson { #brdr.aligner.Aligner.get_results_as_geojson }

```python
aligner.Aligner.get_results_as_geojson(
    resulttype=AlignerResultType.PROCESSRESULTS,
    formula=False,
    attributes=False,
)
```

get a geojson of a dictionary containing the resulting geometries for all
    'serial' relevant distances. The resulttype can be chosen.
formula (boolean, Optional): The descriptive formula is added as an attribute to the result
attributes (boolean, Optional): The original attributes/properties are added to the result

### get_thematic_union { #brdr.aligner.Aligner.get_thematic_union }

```python
aligner.Aligner.get_thematic_union()
```

returns a unary_unioned geometry from all the thematic geometries
:return:

### load_reference_data { #brdr.aligner.Aligner.load_reference_data }

```python
aligner.Aligner.load_reference_data(loader)
```

Loads the reference features into the aligner, and prepares the reference-data for processing
:param loader:
:return:

### load_thematic_data { #brdr.aligner.Aligner.load_thematic_data }

```python
aligner.Aligner.load_thematic_data(loader)
```

Loads the thematic features into the aligner
:param loader:
:return:

### predictor { #brdr.aligner.Aligner.predictor }

```python
aligner.Aligner.predictor(
    dict_thematic=None,
    relevant_distances=[round(k, RELEVANT_DISTANCE_DECIMALS) for k in np.arange(0, 310, 10, dtype=int) / 100],
    od_strategy=OpenDomainStrategy.SNAP_ALL_SIDE,
    threshold_overlap_percentage=50,
)
```

Predicts the 'most interesting' relevant distances for changes in thematic
elements based on a distance series.

This function analyzes a set of thematic geometries (`self.dict_thematic`) to
identify potentially interesting distances where changes occur. It performs
the following steps:

1. **Process Distance Series:**
    - Calculates a series of results for different distances specified by
      `relevant_distances`.
    - This calculation might involve functions like `self.process_series`
      (implementation details likely depend on your specific code).

2. **Calculate Difference Metrics:**
    - Analyzes the results from the distance series to compute difference
      metrics between thematic elements at each distance (using
      `diffs_from_dict_series`).

3. **Identify Breakpoints and Zero-Streaks:**
    - For each thematic geometry, it identifies potential "breakpoints" where
      the difference metric changes sign (from positive to negative or vice
      versa).
    - It also identifies "zero-streaks" which are consecutive distances with a
      difference metric close to zero (potentially indicating minimal change).

4. **Predict Interesting Distances:**
    - The function considers distances corresponding to breakpoints and
      zero-streaks as potentially interesting for further analysis.
    - These distances are stored in a dictionary (`dict_predictions`) with the
      thematic element key as the outer key.
    - Additionally, the corresponding results from the distance series for
      those distances are included.

Args:
    dict_thematic: the dictionary with the thematic geometries to 'predict'. Default is None, so all thematic geometries inside the aligner will be processed.
    relevant_distances (np.ndarray, optional): A series of relevant distances
        (in meters) to process. : A NumPy array of distances to
      be analyzed.
    od_strategy (int, optional): The strategy to determine how to handle
        information outside the reference polygons (Open Domain)
        (default: SNAP_FULL_AREA_ALL_SIDE)
    threshold_overlap_percentage (int, optional): Threshold (%) to determine
        from which overlapping-percentage a reference-polygon has to be included
        when there aren't relevant intersections or relevant differences
        (default 50%).
        When setting this parameter to '-1' the original border for will be returned for cases where nor relevant intersections and relevant differences are found

    relevant_distances (np.ndarray, optional): A NumPy array of distances to
      be analyzed. Defaults to np.arange(0.1, 5.05, 0.1).
    od_strategy (OpenDomainStrategy, optional): A strategy for handling
      open data in the processing (implementation specific). Defaults to
     OpenDomainStrategy.SNAP_ALL_SIDE.
    threshold_overlap_percentage (int, optional): A percentage threshold for
      considering full overlap in the processing (implementation specific).
     Defaults to 50.

Returns:
    dict_series: A dictionary containing the resultset for all relevant distances for each thematic element.
    dict_predictions: A dictionary containing predicted interesting distances for each
    thematic element.
        - Keys: Thematic element identifiers from `self.dict_thematic`.
        - Values: Dictionaries with the following structure for each
           thematic element:
            - Keys: Distances identified as interesting (breakpoints or
            zero-streaks).
            - Values: dicts containing results (likely specific to
            your implementation) from the distance series for the
            corresponding distance.
    diffs_dict: a dictionary with the differences for each relevant distance

### process { #brdr.aligner.Aligner.process }

```python
aligner.Aligner.process(
    dict_thematic=None,
    relevant_distances=None,
    relevant_distance=1,
    od_strategy=OpenDomainStrategy.SNAP_ALL_SIDE,
    threshold_overlap_percentage=50,
)
```

Calculates the resulting dictionaries for thematic data based on a series of
    relevant distances.

Args:
    relevant_distances (Iterable[float]): A series of relevant distances
        (in meters) to process
    od_strategy (int, optional): The strategy to determine how to handle
        information outside the reference polygons (Open Domain)
        (default: SNAP_FULL_AREA_ALL_SIDE)
    threshold_overlap_percentage (int, optional): Threshold (%) to determine
        from which overlapping-percentage a reference-polygon has to be included
        when there aren't relevant intersections or relevant differences
        (default 50%).
        When setting this parameter to '-1' the original border for will be returned for cases where nor relevant intersections and relevant differences are found


Returns:
    dict: A dictionary, for every thematic ID a dictionary with the results for all distances

        {
            'theme_id_1': {0: (ProcessResult), 0.1:
                (ProcessResult), ...},
            'theme_id_2': {0: (ProcessResult), 0.1:
                (ProcessResult), ...},
            ...
        }

### process_geometry { #brdr.aligner.Aligner.process_geometry }

```python
aligner.Aligner.process_geometry(
    input_geometry,
    relevant_distance=1,
    od_strategy=OpenDomainStrategy.SNAP_ALL_SIDE,
    threshold_overlap_percentage=50,
)
```

method to align a geometry to the reference layer

Args:
    input_geometry (BaseGeometry): The input geometric object.
    relevant_distance: The relevant distance (in meters) for processing
    od_strategy (int, optional): The strategy to determine how to handle
        information outside the reference polygons (Open Domain)
        (default: SNAP_FULL_AREA_ALL_SIDE)
    threshold_overlap_percentage (int, optional): Threshold (%) to determine
        from which overlapping-percentage a reference-polygon has to be included
        when there aren't relevant intersections or relevant differences
        (default 50%).
        When setting this parameter to '-1' the original border for will be returned for cases where nor relevant intersections and relevant differences are found


Returns:
    ProcessResult : A dict containing the resulting geometries:

    *   result (BaseGeometry): The resulting output geometry
    *   result_diff (BaseGeometry): The resulting difference output geometry
    *   result_diff_plus (BaseGeometry): The resulting positive difference
        output geometry
    *   result_diff_min (BaseGeometry): The resulting negative difference output
        geometry
    *   relevant_intersection (BaseGeometry): The relevant_intersection
    *   relevant_difference (BaseGeometry): The relevant_difference
    *   remark (str): remarks collected when processing the geometry

### save_results { #brdr.aligner.Aligner.save_results }

```python
aligner.Aligner.save_results(
    path,
    resulttype=AlignerResultType.PROCESSRESULTS,
    formula=True,
)
```

Exports analysis results (as geojson) to path.

This function exports 6 GeoJSON files containing the analysis results to the
specified `path`.

Args:
path (str): The path to the directory where the GeoJSON files will be saved.
formula (bool, optional): Whether to include formula-related information
    in the output. Defaults to True.

Details of exported files:
- result.geojson: Contains the original thematic data from `
  self.dict_result`.
- result_diff.geojson: Contains the difference between the original
  and predicted data from `self.dict_result_diff`.
- result_diff_plus.geojson: Contains results for areas that are
  added (increased area).
- result_diff_min.geojson: Contains results for areas that are
  removed (decreased area).
- result_relevant_intersection.geojson: Contains the areas with
  relevant intersection that has to be included in the result.
- result_relevant_difference.geojson: Contains the areas with
  relevant difference that has to be excluded from the result.