# aligner.Aligner { #brdr.aligner.Aligner }

```python
aligner.Aligner(
    self,
    *,
    feedback=None,
    relevant_distance=1,
    threshold_overlap_percentage=50,
    od_strategy=OpenbaarDomeinStrategy.SNAP_SINGLE_SIDE,
    crs='EPSG:31370',
)
```

This class is used to compare the thematic data with the reference data.
The reference data can be loaded in different ways, for example by using the GRB data.
The thematic data can be loaded by using a geojson file.
The class can be used to compare the thematic data with the reference data.

## Methods

| Name | Description |
| --- | --- |
| [add_multi_polygons_from_geom_to_array](#brdr.aligner.Aligner.add_multi_polygons_from_geom_to_array) | Append valid polygons and multipolygons extracted from a given geometry to an |
| [get_formula](#brdr.aligner.Aligner.get_formula) | Calculates formula-related information based on the input geometry. |
| [get_reference_data_dict_grb_actual](#brdr.aligner.Aligner.get_reference_data_dict_grb_actual) | Gets a dict of the reference data: |
| [partition](#brdr.aligner.Aligner.partition) | Filters a computed grid of partitions (generated by `_grid_bounds`) based on |
| [process_dict_thematic](#brdr.aligner.Aligner.process_dict_thematic) | Aligns a thematic dictionary of geometries to the reference layer based on |
| [process_geometry](#brdr.aligner.Aligner.process_geometry) | method to align a geometry to the reference layer |
| [process_series](#brdr.aligner.Aligner.process_series) | Calculates percentage differences for thematic data based on a series of relevant |

### add_multi_polygons_from_geom_to_array { #brdr.aligner.Aligner.add_multi_polygons_from_geom_to_array }

```python
aligner.Aligner.add_multi_polygons_from_geom_to_array(geom, array)
```

Append valid polygons and multipolygons extracted from a given geometry to an
existing array.

Args:
    geom (BaseGeometry): The input geometry to process.
    array (list): An existing list to store valid polygons and multipolygons.

Returns:
    list: A list containing valid polygons and multipolygons extracted from the
        input geometry.

### get_formula { #brdr.aligner.Aligner.get_formula }

```python
aligner.Aligner.get_formula(geometry, with_geom=False)
```

Calculates formula-related information based on the input geometry.

Args:
    geometry (shapely.geometry object): The input geometry.
    with_geom (bool, optional): Whether to include geometry information in the
        output. Defaults to False.

Returns:
    dict: A dictionary containing formula-related data:

        -   'full': True if the intersection is the same as the reference
            geometry, else False.
        -   'area': Area of the intersection or reference geometry.
        -   'percentage': Percentage of intersection area relative to the
            reference geometry.
        -   'geometry': GeoJSON representation of the intersection (if
            with_geom is True).

### get_reference_data_dict_grb_actual { #brdr.aligner.Aligner.get_reference_data_dict_grb_actual }

```python
aligner.Aligner.get_reference_data_dict_grb_actual(
    grb_type=GRBType.ADP,
    partition=0,
)
```

Gets a dict of the reference data:
administrative plots (adp), buildings (gbg) or artwork (knw) from GRB,
geographically based around the previously loaded thematic dictionary.

### partition { #brdr.aligner.Aligner.partition }

```python
aligner.Aligner.partition(geom, delta)
```

Filters a computed grid of partitions (generated by `_grid_bounds`) based on
intersection with a geometric object (`geom`).

Args:
    geom (BaseGeometry): The geometric object to check for intersection
        with partitions.
    delta (float): The distance between partitions (same value used in
        `_grid_bounds`).

Returns:
    list: A filtered list of Polygon objects representing the partitions
        overlapping the original geometric object.

### process_dict_thematic { #brdr.aligner.Aligner.process_dict_thematic }

```python
aligner.Aligner.process_dict_thematic(
    relevant_distance=1,
    od_strategy=OpenbaarDomeinStrategy.SNAP_SINGLE_SIDE,
    full_overlap_percentage=50,
)
```

Aligns a thematic dictionary of geometries to the reference layer based on
specified parameters. - method to align a thematic dictionary to the reference
layer

Args:
    relevant_distance (float, optional): The relevant distance (in meters) for
        processing. Defaults to 1.
    od_strategy (int, optional): The strategy for overlap detection.
        Defaults to 1.
    full_overlap_percentage (float, optional): The threshold percentage for
        considering full overlap. Defaults to 50.

Returns:
    tuple: A tuple containing dictionaries with processed data:
        - dict_r: Aligned thematic data for each thematic key.
        - dict_rd: global differences between thematic data and reference data.
        - dict_rdp: Positive differences.
        - dict_rdm: Negative differences.
        - dict_si: relevant intersections.
        - dict_sd: relevant differences.

### process_geometry { #brdr.aligner.Aligner.process_geometry }

```python
aligner.Aligner.process_geometry(
    geometry,
    relevant_distance=1,
    od_strategy=OpenbaarDomeinStrategy.SNAP_SINGLE_SIDE,
    full_overlap_percentage=50,
)
```

method to align a geometry to the reference layer

Args:
    geometry (BaseGeometry): The input geometric object.
    relevant_distance
    od_strategy
    full_overlap_percentage (float): The buffer distance (positive or negative).

Returns:
    tuple[BaseGeometry...] : A tuple containing the resulting geometries:

    *   result (BaseGeometry): The resulting output geometry
    *   result_diff (BaseGeometry): The resulting difference output geometry
    *   result_diff_plus (BaseGeometry): The resulting positive difference output
        geometry
    *   result_diff_min (BaseGeometry): The resulting negative difference output
        geometry
    *   relevant_intersection (BaseGeometry): The relevant_intersection
    *   relevant_difference (BaseGeometry): The relevant_difference

#### Notes: {.doc-section .doc-section-notes}

Example:

### process_series { #brdr.aligner.Aligner.process_series }

```python
aligner.Aligner.process_series(
    relevant_distances,
    od_strategy=OpenbaarDomeinStrategy.SNAP_SINGLE_SIDE,
    full_overlap_percentage=50,
)
```

Calculates percentage differences for thematic data based on a series of relevant
    distances.

Args:
    relevant_distances (list): A list of relevant distances (in meters) to
        process.
    od_strategy (int, optional): The strategy for overlap detection.
        Defaults to 1.
    full_overlap_percentage (float, optional): The threshold percentage for
        considering full overlap. Defaults to 50.

Returns:
    dict: A dictionary containing percentage differences for each thematic key:

        {
            'thematic_key1': {
                distance1: percentage1,
                distance2: percentage2,
                ...
            },
            'thematic_key2': {
                distance1: percentage1,
                distance2: percentage2,
                ...
            },
            ...
        }